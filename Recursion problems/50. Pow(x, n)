
Problem: Implement pow(x, n), which calculates x raised to the power n (i.e., xn).
--------------------------------------------------------------------------------
Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100
---------------------------------------------------------------------------------

Solution:

class Solution {
    public double myPow(double x, int n) {
     if(n==0){  // Base case
         return 1;
     }
     if(n>=0){  // calculate positive power
         double ans = myPow(x, n/2);
         if(n%2==0){
             return ans*ans;
         } else{
             return x*ans*ans;  // in case of Positive power calculation and odd power, we need to multiply by (x).
         }
     } else{   // calculate Negative power
         double ans = myPow(x, n/2);
         if(n%2==0){
             return ans*ans;
         } else{
             return (1/x)*ans*ans; // in case of Negative power calculation and odd, power we need to multiply by (1/x).
         }
     }  
    }
}
----------------------------------------------------------------------------------------------------------------------------
T(c) = calls(1)^ height(logn) +preorder(0) * height(logn) + postorder(k = constant) * height(logn).
     = 1 + 0 + k*log(n).
     = log(n)
------------------------------------------------------------------------------------------------------------------------
