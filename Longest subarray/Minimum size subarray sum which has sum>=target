Given an array of positive integers nums and a positive integer target, return the minimal length of a 
subarray
 whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.

 

Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.
Example 2:

Input: target = 4, nums = [1,4,4]
Output: 1
Example 3:

Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0
 

Constraints:

1 <= target <= 109
1 <= nums.length <= 105
1 <= nums[i] <= 104
 

==============================≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠≠
Tc = o(n)
sc = O(N)
==================

class Solution {
    public int minSubArrayLen(int k, int[] arr) {
        HashMap<Integer, Integer> map = new HashMap<>();
        
        int mini = Integer.MAX_VALUE, sum = 0, start = 0; // start will be the place from where we start minimising the array
        for(int i=0;i<arr.length;i++) {
            sum += arr[i];
            while(sum>=k) {
                mini = Math.min(mini, i-start+1);
                sum = sum - arr[start++]; 
            }
        }
        return mini == Integer.MAX_VALUE ? 0: mini;
    }
}

