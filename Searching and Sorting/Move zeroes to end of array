Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

 

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]
=======================================================
Time = o(n), space = o(1)
-=-----------------------------
class Solution {
    public void moveZeroes(int[] nums) {
        int zero = -1;
        for(int i=0; i< nums.length;i++){
            if(nums[i]==0)
            {
                zero = i; // get index of first zero
                break;
            }
        }
        int number = zero+1; // so that after first zero only we get the nuber to swap else before zer all are proper number only so no need to swap
        // zero!=-1, dont do anything if no zeroes
        while(number<nums.length && zero!=-1) {
            if(nums[number] != 0){
                swap(nums, number, zero);
                zero++; // increment zero by 1 when swap happens
            }
            number++;// always increament number by 1
        }
    }

    public void swap(int[] nums, int start, int end){
        int val = nums[start];
        nums[start] = nums[end];
        nums[end] = val;
    }
}
