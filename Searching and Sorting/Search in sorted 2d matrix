Problem 1: Leetcode 74
You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.
====================
Problem 2: leetcode 240
Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
==============================================================================================
Approach: Solution for both problems

1. Start searching from first row and last column.
2. if target < matrix[row][column], then decrement column.
3. Else if target > matrix[row][column], then increment row.
4. else return true, when target matches value. 

==============================================================================================

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int row = 0, column = matrix[0].length-1; // start seaarching from first row and last column
        while(row < matrix.length && column>=0) {
            if(target == matrix[row][column])
                return true;
            else if (target < matrix[row][column])
                column--;
            else
                row++;
        }
        return false;
    }
}
