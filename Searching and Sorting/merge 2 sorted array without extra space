Merge two Sorted Arrays Without Extra Space
Problem statement: Given two sorted arrays arr1[] and arr2[] of sizes n and m in non-decreasing order. Merge them in sorted order. Modify arr1 so that it contains the first N elements and modify arr2 so that it contains the last M elements.

Examples
Example 1:

Input: 
n = 4, arr1[] = [1 4 8 10] 
m = 5, arr2[] = [2 3 9]

Output: 
arr1[] = [1 2 3 4]
arr2[] = [8 9 10]

Explanation:
After merging the two non-decreasing arrays, we get, 1,2,3,4,8,9,10.

Example2:

Input: 
n = 4, arr1[] = [1 3 5 7] 
m = 5, arr2[] = [0 2 6 8 9]

Output: 
arr1[] = [0 1 2 3]
arr2[] = [5 6 7 8 9]

Explanation:
After merging the two non-decreasing arrays, we get, 0 1 2 3 5 6 7 8 9.

======================================================================================================
Time complexity: o((n+m)log(m+n)) = nLogn

=======================

import java.util.*;
public class Solution {
    public static void mergeTwoSortedArraysWithoutExtraSpace(long []a, long []b){
        int start = a.length-1;
        int end = 0;

        while(start>=0 && end <b.length){
            if(a[start]>b[end]) {
                swap(a, b, start, end);
            }
            start--;
            end++;
        }
        Arrays.sort(a);
        Arrays.sort(b);
    }

    private static void swap(long []a, long []b, int start, int end){
        long val = a[start];
        a[start] = b[end];
        b[end] = val;
    }
}
