Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one
character in this string to match any word in the data structure.

Implement the MagicDictionary class:

1. MagicDictionary() Initializes the object.
2. void buildDict(String[] dictionary) Sets the data structure with an array of distinct strings dictionary.
3. bool search(String searchWord) Returns true if you can change exactly one character in searchWord to match any string in the data structure,
   otherwise returns false.
------------------------------------------------------------------------------------------------------------------------------   
Input
["MagicDictionary", "buildDict", "search", "search", "search", "search"]
[[], [["hello", "leetcode"]], ["hello"], ["hhllo"], ["hell"], ["leetcoded"]]
Output: [null, null, false, true, false, false]

Explanation
MagicDictionary magicDictionary = new MagicDictionary();
magicDictionary.buildDict(["hello", "leetcode"]);
magicDictionary.search("hello"); // return False
magicDictionary.search("hhllo"); // We can change the second 'h' to 'e' to match "hello" so we return True
magicDictionary.search("hell"); // return False
magicDictionary.search("leetcoded"); // return False
--------------------------------------------------------------------------------------------------------------------------------- 
Constraints:

1 <= dictionary.length <= 100
1 <= dictionary[i].length <= 100
dictionary[i] consists of only lower-case English letters.
All the strings in dictionary are distinct.
1 <= searchWord.length <= 100
searchWord consists of only lower-case English letters.
buildDict will be called only once before search.
At most 100 calls will be made to search.
---------------------------------------------------------------------------------------------------------------------------------
class MagicDictionary {
    
    public static class Node{
        private Node[] children = new Node[26];
        private boolean isEnd = false;
        
        public Node get(char ch){
            return children[ch-'a'];
        }
        
        public void set(char ch){
            children[ch-'a'] = new Node();
        }
        
        public boolean getEnd(){
            return isEnd;
        } 
        
        public void setEnd(){
            isEnd = true;
        }
        
        public boolean contains(char ch){
            return children[ch-'a']!=null;
        }
        
    }

    Node root;
    public MagicDictionary() {
        root = new Node();
    }
    
    public void insert(Node root, String word){             // insert word in dictionary
        for(int i=0;i<word.length();i++){
            char ch = word.charAt(i);
            if(root.contains(ch)==false){
                root.set(ch);
            }
            root = root.get(ch);
        }            
        root.setEnd();
    }
    
    public void buildDict(String[] dictionary) {
        for(String word: dictionary){
            insert(root, word);                         // insert all word in dictionary
        }
    }
    
    public boolean search(String word, int idx,Node root, boolean change){      
        if(idx == word.length()){                                         // if we are at words last character, then check: 
            if(change ==true && root.getEnd() == true)                                // if change is true and it is end of word, then return true.
                return true;
            return false;                                                             // else return false
        }
        
        char ch = word.charAt(idx);                         
        if(root.contains(ch) && search(word, idx+1, root.get(ch), change)){      // we have same character and aage se true aa rha, means we are not changing 
            return true;                                      // current char but in further somewhere we have changed character that is why it returns true
        }
        
        if(change==true){
            return false;                // if already char is replaced which mean change is true, then return false
        }
        
        for(char chn = 'a';chn<='z';chn++){    
            if(chn==ch){                       
                continue;                 // if current char and replacing char is same then continue to check with other characters
            }
            
            if(root.contains(chn) && search(word, idx+1, root.get(chn), true)){ 
                return true;                // traverse from a to z and check if by replacing(that is why change is passed as true) any char from here
            }                               //  then we will return true, else if we aren't able to replace from a to z then return false.
        }
        return false;
        
        
    }
    
    public boolean search(String searchWord) {
        return search(searchWord, 0, root, false);
    }
}
