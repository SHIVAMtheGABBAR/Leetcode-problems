A trie (pronounced as "try") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings.
There are various applications of this data structure, such as autocomplete and spellchecker.
-----------------------------------------------------------------------------------------------------------------------------------
Implement the Trie class:
Trie() Initializes the trie object.
1. void insert(String word) Inserts the string wordinto the trie.
2. int countWordsEqualTo(String word) Returns the number of instances of the string word in the trie.
3. int countWordsStartingWith(String prefix)Returns the number of strings in the trie that have the string prefix as a prefix.
4. void erase(String word) Erases the string wordfrom the trie.
------------------------------------------------------------------------------------------------------------------------------------
Input
["Trie", "insert", "insert", "countWordsEqualTo", "countWordsStartingWith", "erase", "countWordsEqualTo", "countWordsStartingWith", "erase",
"countWordsStartingWith"]
[[], ["apple"], ["apple"], ["apple"], ["app"], ["apple"], ["apple"], ["app"], ["apple"], ["app"]]
Output: [null, null, null, 2, 2, null, 1, 1, null, 0]
-------------------------------------------------------------------------------------------
Explanation
Trie trie = new Trie();
trie.insert("apple");               // Inserts "apple".
trie.insert("apple");               // Inserts another "apple".
trie.countWordsEqualTo("apple");    // There are two instances of "apple" so return 2.
trie.countWordsStartingWith("app"); // "app" is a prefix of "apple" so return 2.
trie.erase("apple");                // Erases one "apple".
trie.countWordsEqualTo("apple");    // Now there is only one instance of "apple" so return 1.
trie.countWordsStartingWith("app"); // return 1
trie.erase("apple");                // Erases "apple". Now the trie is empty.
trie.countWordsStartingWith("app"); // return 0
---------------------------------------------------------------------------------------------------
Constraints:
1 <= word.length, prefix.length <= 2000
word and prefix consist only of lowercase English letters.
At most 3 * 10^4 calls in total will be made to insert, countWordsEqualTo, countWordsStartingWith, and erase.
It is guaranteed that for any function call to erase, the string word will exist in the trie.
----------------------------------------------------------------------------------------------------------

public class Trie {
    
    public static class Node{
        private Node[] children = new Node[26];
        private int freqCount = 0;
        private int prefixCount = 0;        // to check prefix count
        
        public boolean contains(char ch){
            return children[ch-'a']!=null;
        }
        
        public Node get(char ch){
            return children[ch-'a'];
        }
        
        public void set(char ch){
            children[ch-'a'] = new Node();
        }
        
        public int getFreq(){
            return freqCount;
        }
        
        public int getPrefix(){
            return prefixCount;
        }
        
        public int increaseFreq(){
            return freqCount++;
        }
        
        public int decreaseFreq(){
            return freqCount--;
        }
        
        public int increasePrefix(){
            return prefixCount++;
        }
        
        public int decreasePrefix(){
            return prefixCount--;
        }   
    }
    Node root;
    public Trie() {
        root = new Node();
    }

    public void insert(String word) {
        Node curr = root;
        
        for(int i=0;i<word.length();i++){
            curr.increasePrefix();                  // increase prefix count when a character is traversed.
            
            char ch = word.charAt(i);
            
            if(curr.contains(ch)==false)
                curr.set(ch);
            curr = curr.get(ch);
        }
        curr.increaseFreq();                        // increase freq count for the last character, it will store number of duplicate string found
        curr.increasePrefix();                      // increase prefix count for the last character
    }

    public int countWordsEqualTo(String word) {
        Node curr = root;
        
        for(int i=0;i<word.length();i++){
            char ch = word.charAt(i);
            
            if(curr.contains(ch)==false)
                return 0;                             // if char not found return 0.
            curr = curr.get(ch);
        }
        return curr.getFreq();                        // if reached last of string then return freq of words
    }

    public int countWordsStartingWith(String word) {
        Node curr = root;
        
        for(int i=0;i<word.length();i++){
            char ch = word.charAt(i);
            
            if(curr.contains(ch)==false)
                return 0;
            curr = curr.get(ch);
        }
        return curr.getPrefix();                  // if reached last of string then return freq of prefix of words
    }

    public void erase(String word) {
        if(countWordsEqualTo(word)==0){           // check if that word is present in tries or not, if not present return
            return;
        }
        Node curr = root;
        
        for(int i=0;i<word.length();i++){
            curr.decreasePrefix();              // decrease prefix
            char ch = word.charAt(i);
            curr = curr.get(ch);
        }
        curr.decreaseFreq();                    // decrease freq at the end
        curr.decreasePrefix();                  // decrease prefix at the end
    }

}
