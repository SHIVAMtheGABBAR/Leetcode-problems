Given a string of length N of lowercase alphabet characters. The task is to complete the function countDistinctSubstring(), which returns the
count of total number of distinct substrings of this string.

Input: The first line of input contains an integer T, denoting the number of test cases. Then T test cases follow. Each test case contains a string str.

Output: For each test case in a new line, output will be an integer denoting count of total number of distinct substrings of this string.

User Task:Since this is a functional problem you don't have to worry about input, you just have to complete the function countDistinctSubstring().
-----------------------------------------------------------------------------------------------------------------------
Constraints:
1 ≤ T ≤ 10
1 ≤ N ≤ 1000

Input:
2
ab
ababa

Output:
4
10
----------------------------------------------------------------------------------------------------
Exaplanation:
Testcase 1: For the given string "ab" the total distinct substrings are: "", "a", "b", "ab".
---------------------------------------------------------------------------------------------------------------------------------
Approach: while inseting character in trie increment count value by 1 and return count.
____________________________________________________________________________________________________________________
class GfG
{
   public static class Node{
        private Node[] children = new Node[26];
        
        public Node get(char ch){
            return children[ch-'a'];
        }
        
        public void set(char ch){
            children[ch-'a'] = new Node();
        }       
        
    }    
    
    public static int countDistinctSubstring(String s){
        Node root = new Node();
        int count = 1;                                      // for empty string
        
        for(int i=0;i<s.length();i++){
            Node curr = root;                               // each time need to make curr as root node.
            for(int j=i;j<s.length();j++){
                char ch = s.charAt(j);
                if(curr.get(ch)==null){
                    curr.set(ch);                     // set charcter in trie, ad then increment count value by 1
                    count++;
                }
                curr = curr.get(ch);
            }
        }
        return count;
    }
}
