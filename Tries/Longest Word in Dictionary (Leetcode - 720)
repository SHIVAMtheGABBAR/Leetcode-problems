Given an array of strings words representing an English Dictionary, return the longest word in words that can be built one character at a time by
other words in words.
If there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.
----------------------------------------------------------------------------------------------------------------
Input: words = ["w","wo","wor","worl","world"]
Output: "world"
Explanation: The word "world" can be built one character at a time by "w", "wo", "wor", and "worl".

Input: words = ["a","banana","app","appl","ap","apply","apple"]
Output: "apple"
Explanation: Both "apply" and "apple" can be built from other words in the dictionary. However, "apple" is lexicographically smaller than "apply".
----------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    
    public static class Node{
        private Node[] children= new Node[26];
        private boolean isEnd = false;
        
        public Node getNode(char ch){
            return children[ch-'a'];
        }
        
        public void setNode(char ch){
            children[ch-'a'] = new Node();
        }
        
        public boolean getIsEnd(){
            return isEnd;
        }
        
        public void  setIsEnd(){
            isEnd = true;
        }
        
        public boolean contains(char ch){
            return children[ch-'a']!=null;
        }
    }
    
    public void insert(Node root, String word){
        for(int i=0;i<word.length();i++){
            char ch = word.charAt(i);
            if(root.contains(ch)==false){
                root.setNode(ch);
            }
            root = root.getNode(ch);
        }
        root.setIsEnd();
    }
    
    public void DFS(Node root, String ansSoFar){
        if(root.getIsEnd()==false) return;              // Checking if this prefix is not set as end then no other string made from this can be answer 
        
        if(ansSoFar.length() > res.length()){           // if length bigger then only update answer, because in problem they ask for lexographically small answer
            res = ansSoFar;                             // if ask for lexographiccally bigger answer then we can use { ansSoFar.length() >= res.length() }
        }
        
        for(char ch = 'a';ch<='z';ch++){                // loop from a to z if any char is found
            if(root.contains(ch)==true){
                DFS(root.getNode(ch), ansSoFar+ch);     // if found then update string answer and root also.
            }
        }
        
    }
    
    String res = "";                                    // global variable to return answer
    public String longestWord(String[] words) {
        Node root = new Node();

        root.setIsEnd();                                // handle negative scenario where root's end is already set to true for answer as empty string. 
        for(String word : words){
            insert(root, word);                       // insert all word in Trie
        }
        DFS(root, "");                                // now run DFS on root with empty string
        return res;
    }
}
