Given an m x n board of characters and a list of strings words, return all words on the board.

Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring.
The same letter cell may not be used more than once in a word.
---------------------------------------------------------------------------------------------------------------------------------
Input: board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]
Output: ["eat","oath"]

Input: board = [["a","b"],["c","d"]], words = ["abcb"]
Output: []
------------------------------------------------------------------------------------------------------------------------- 
Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 12
board[i][j] is a lowercase English letter.
1 <= words.length <= 3 * 104
1 <= words[i].length <= 10
words[i] consists of lowercase English letters.
All the strings of words are unique.
--------------------------------------------------------------------------------------------------------------------
Time complexity = O(exponential)
Time complexity = O(N)
---------------------------------------------------------------------------------------------------------------------
class Solution {
    public static class Node{
        private Node[] children = new Node[26];
        private boolean isEnd = false;
        
        public boolean contains(char ch){
            return (children[ch - 'a'] != null);
        }
        
        public Node get(char ch){
            return children[ch - 'a'];
        }
        
        public void set(char ch){
            children[ch - 'a'] = new Node();
        }
        
        public boolean getEnd(){
            return isEnd;
        }
        
        public void setEnd(){
            isEnd = true;
        }
    }
    
    public void insert(Node curr, String word) {
        for(int i=0; i<word.length(); i++){
            char ch = word.charAt(i);

            if(curr.contains(ch) == false)
                curr.set(ch);
        
            curr = curr.get(ch);
        }
        
        curr.setEnd();
    }
    
    int[] x = {-1, 1, 0, 0};
    int[] y = {0, 0, -1, 1};
    HashSet<String> res;
    
    public void exist(int r, int c,  char[][] board, String ssof, Node root){ 
        if(root == null) return;
        
        if(root.getEnd() == true){                          // if word is there in trie add it in answer
            // if word exists in dictionary or not
            res.add(ssof);
        }
        
        if(r < 0 || c < 0 || r >= board.length || c >= board[0].length || board[r][c] == '0')   // handling -ve cases
            return;
        
        for(int call=0; call<4; call++){                                                        // traversing all 4 sides of a tile
            char ch = board[r][c];
            board[r][c] = '0';                                                                  // mark tile as visited 
            exist(r + x[call], c + y[call], board, ssof + ch, root.get(ch));                    // Applying DFS on all 4 sides of a tile
            board[r][c] = ch;                                                                   // mark tile as Unvisited
        }    
    }
    
    public List<String> findWords(char[][] board, String[] words) {
        res = new HashSet<>();
        
        Node root = new Node();
        for(String word: words){
            // insert in trie
            insert(root, word);
        }
            
        for(int i=0; i<board.length; i++){
            for(int j=0; j<board[0].length; j++){
                exist(i, j, board, "", root);
            }
        }
        
        List<String> ans = new ArrayList<>();
        for(String str: res){
            ans.add(str);
        }
        return ans;
    }
}
