Given a string s, find the length of the longest substring without repeating characters.

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
---------------------------------------------------------------------------------------------------------------------------
Approach:  
Time complexity = O(2*N) for traversing with left and right
Space complexity = O(N) for hashmap
---------------------------------------------------------------------------------------------------------------------------
class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashMap<Character, Integer> hmap = new HashMap<>();
        int ans = 0, left = 0;
        
        for(int right=0;right<s.length();right++){
            int currCharFreq = hmap.getOrDefault(s.charAt(right), 0);
            hmap.put(s.charAt(right), currCharFreq+1);
            
            while(currCharFreq>0){                            // if freq >0 which means now duplicate is inserted in hasmap, need to remove it
                //remove from left and increment left   
                int removeCharFreq = hmap.get(s.charAt(left));   // remove char at left position
                
                if(removeCharFreq>1){
                    hmap.put(s.charAt(left), hmap.getOrDefault(s.charAt(left), 0)-1);
                } else{
                    hmap.remove(s.charAt(left));
                }
                
                if(s.charAt(left)==s.charAt(right)){              // if char which is removed itself is the duplicate char then only reduce the currCharFreq. 
                    currCharFreq--;
                }
                left++;
            }
            
            if(hmap.size()>ans){
                ans = hmap.size();                      // Get the size of hashMap and update the answer
            }
        }
        return ans;
    }
}
