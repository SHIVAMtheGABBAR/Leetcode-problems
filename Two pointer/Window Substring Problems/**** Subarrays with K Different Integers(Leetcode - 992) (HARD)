Given an integer array nums and an integer k, return the number of good subarrays of nums.

A good array is an array where the number of different integers in that array is exactly k.

For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.
A subarray is a contiguous part of an array.
---------------------------------------------------------------------------------------------------------------------------
Input: nums = [1,2,1,2,3], k = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]
Example 2:

Input: nums = [1,2,1,3,4], k = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].
-----------------------------------------------------------------------------------------------------------------------------
Approach: for k distinct we use kdistinct  = atmost k elements  - atmost k-1 elements
Time complexity = O(N)
Space complexity = O(N)
-----------------------------------------------------------------------------------------------------------------------------
class Solution {
    
    // logic for atmost k elements applied here, as we didi in other problems of this section
    public int subarraysWithAtmostK(int[] nums, int k) {
        HashMap<Integer, Integer> hmap = new HashMap<>();
            int totalCount = 0, ansLength = 0, left = 0;

            for(int right = 0; right<nums.length;right++){
                totalCount++;
                hmap.put(nums[right], hmap.getOrDefault(nums[right], 0)+1);
                while(hmap.size()>k){
                    int removeCharCount = hmap.get(nums[left]);
                    if(removeCharCount>1){
                        hmap.put(nums[left], removeCharCount-1);	
                    } else{
                        hmap.remove(nums[left]);
                    }
                    left++;
                    totalCount--;
                }

                ansLength += right-left+1;
            }
            return ansLength;
    }
    
    public int subarraysWithKDistinct(int[] nums, int k) {
        // for k distinct we use kdistinct  = atmost k elements  - atmost k-1 elements
        return subarraysWithAtmostK(nums, k) - subarraysWithAtmostK(nums, k-1); 
    }
}
