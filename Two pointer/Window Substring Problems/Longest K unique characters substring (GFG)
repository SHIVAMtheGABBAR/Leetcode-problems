Given a string you need to print the size of the longest possible substring that has exactly K unique characters. If there is no possible substring then print -1.
----------------------------------------------------------------------------------------------------------------------
Input: S = "aabacbebebe", K = 3
Output: 7
Explanation: "cbebebe" is the longest 
substring with K distinct characters.

Input: S = "aaaa", K = 2
Output: -1
Explanation: There's no substring with K distinct characters.
-------------------------------------------------------------------------------------------------------------------
Expected Time Complexity: O(|S|).
Expected Auxiliary Space: O(1).
-------------------------------------------------------------------------------------------------------------------
Approach: Use 2 pointer approach using left and right. And whenever size of hashMap equals k, then update answer 
-------------------------------------------------------------------------------------------------------------------
public int longestkSubstr(String s, int k) {
        HashMap<Character, Integer> hmap = new HashMap<>();
		int totalCount = 0, ansLength = 0, left = 0;
		String ans = "";

		for(int right = 0; right<s.length();right++){
			totalCount++;
			hmap.put(s.charAt(right), hmap.getOrDefault(s.charAt(right), 0)+1);
			while(hmap.size()>k){
				int removeCharCount = hmap.get(s.charAt(left));
				if(removeCharCount>1){
					hmap.put(s.charAt(left), removeCharCount-1);	
				} else{
					hmap.remove(s.charAt(left));
				}
				left++;
				totalCount--;
			}

			if(hmap.size()==k){
				ansLength = Math.max(ansLength, right-left+1);
			}
		}
		if(ansLength==0)
      return -1;
		return ansLength;
}
