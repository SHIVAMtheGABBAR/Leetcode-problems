Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr] 
of which the sum is greater than or equal to target. If there is no such subarray, return 0 instead.
--------------------------------------------------------------------------------------------------------------------------------------------
Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.

Input: target = 4, nums = [1,4,4]
Output: 1

Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0
-------------------------------------------------------------------------------------------------------------------------------------------
Approach: Use 2 pointer, take right and left and whenever [sum>=target] then try to remove elements from left.
Time complexity = O(N)
Space complexity = O(1)
-------------------------------------------------------------------------------------------------------------------------------------------
public int minSubArrayLen(int target, int[] nums) {
        int left = 0, minLength = Integer.MAX_VALUE, sum = 0;
        
        for(int right=0;right<nums.length;right++){
            sum += nums[right];
            while(sum>=target){
                sum = sum-nums[left];
                minLength = Math.min(minLength, right-left+1);
                left++;
            }
        }
        
        return minLength==Integer.MAX_VALUE?0:minLength;      // it means after adding all array valuse also we can not make target then return 0, else minLength 
}
