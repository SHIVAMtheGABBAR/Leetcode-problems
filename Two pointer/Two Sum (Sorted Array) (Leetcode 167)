Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number.
Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.
--------------------------------------------------------------------------------------------------------------------------------------------
Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].

Input: numbers = [2,3,4], target = 6
Output: [1,3]
Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].

Input: numbers = [-1,0], target = -1
Output: [1,2]
Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].
--------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int start = 1, end = numbers.length;
        int[] ans = new int[2];
        while(start < end){
            if(numbers[start-1] + numbers[end-1] > target){
                end--;
            } else if(numbers[start-1] + numbers[end-1] < target){
                start++;
            } else{
                ans[0] = start;
                ans[1] = end;
                break;
            }
        }
        return ans;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int start = 1, end = numbers.length;
      
        while(start < end){
            if(numbers[start-1] + numbers[end-1] > target){
                end--;
            } else if(numbers[start-1] + numbers[end-1] < target){
                start++;
            } else{
                return new int[] { start, end };
            }
        }
        return new int[] {-1, -1};
    }
}
------------------------------------------------------------------------------------------------------------------------------------------

Time Complexity = O(N)
Space Complexity = O(1)
------------------------------------------------------------------------------------------------------------------------------------------
