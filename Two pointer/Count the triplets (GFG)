Given an array of distinct integers. The task is to count all the triplets such that sum of two elements equals the third element.
----------------------------------------------------------------------------------------------------------------------------------------
Input:
N = 4
arr[] = {1, 5, 3, 2}
Output: 2
Explanation: There are 2 triplets: 
1 + 2 = 3 and 3 +2 = 5 

Input: 
N = 3
arr[] = {2, 3, 4}
Output: 0
Explanation: No such triplet exits
------------------------------------------------------------------------------------------------------------------------------------------
Expected Time Complexity: O(N^2)
Expected Auxiliary Space: O(1)
---------------------------------------------------------------------------
Approach: Traverse from right end and think of a+b = c, where c is the rightmost element while traversing, and then find a+b using 2 pointer, where c is target.
          Return count of all such elements where [a+b = c].
---------------------------------------------------------------------------
class Solution {
    
    int getTwoSum(int[] arr, int right, int target){
        int count = 0;
        int left = 0;
        
        while(left<right){
            if(arr[left]+arr[right]==target){
                count++;
                left++;
                right--;
            } else if(arr[left]+arr[right]>target){
                right--;
            } else{
                left++;
            }
        }
        return count;
    }
    
    int countTriplet(int arr[], int n) {
        Arrays.sort(arr);
        int count = 0;
        for(int i=arr.length-1;i>1;i--){
            count += getTwoSum(arr, i-1, arr[i]); 
        }
        return count;
    }
}
