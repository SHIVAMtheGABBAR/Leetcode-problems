Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
-----------------------------------------------------------------------------------------------------------------------------------------
Approach: Count zeroes and when zeroes are more than given limit then remove it from there and each time update max as answer. 
Time complexity = O(2*N)
Space complexity = O(1)
-----------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public int longestOnes(int[] nums, int k) {
        int left = 0, max = 0, zeroes = 0;
        
        for(int right = 0;right<nums.length;right++){
            if(nums[right]==0)                      // if zeroes are present count it
                zeroes++;
            while(zeroes>k){                        // this is invalid because atmost k zeroes are allowed, so remove zeroes from left
                if(nums[left]==0)                   // removing zeroes from left  
                    zeroes--;
                left++;                             // incrementing left each time whether we got 0 or 1
            }
            max = Math.max(max,right-left+1);       // Update answer as max of max and right-left+1  
        }
        return max;                                 // return ans;
    }
}
