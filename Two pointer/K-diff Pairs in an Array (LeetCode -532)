Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.
A k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:

0 <= i < j < nums.length            // it means we cannot sort, but we can sort because second condition has mod so it wont matter also if we sort
|nums[i] - nums[j]| == k
------------------------------------------------------------------------------------------------------
Input: nums = [3,1,4,1,5], k = 2
Output: 2
Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).
Although we have two 1s in the input, we should only return the number of unique pairs.

Input: nums = [1,2,3,4,5], k = 1
Output: 4
Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).

Input: nums = [1,3,1,5,4], k = 0
Output: 1
Explanation: There is one 0-diff pair in the array, (1, 1).
----------------------------------------------------------------------------------------------------- 
Constraints:

1 <= nums.length <= 104
-107 <= nums[i] <= 107
0 <= k <= 107
-----------------------------------------------------------------------------------------------------
Approach: sort the array, and check conditions to return total count
Time complexity = O(NlogN)
Space compleity = O(1)
-----------------------------------------------------------------------------------------------------
class Solution {
    public int findPairs(int[] nums, int k) {
        int count = 0, left = 0, right=1;
        Arrays.sort(nums);
        while(left != nums.length && right!=nums.length){
            if(left>0 && nums[left]==nums[left-1]){         // if first element index is on left and prev and next element are same then increment left and conti.
                left++;
                continue;
            } 
            if(left==right){                                // if index of both elements are same then increment right and continue;
                right++;
                continue;
            }
            
            int val  = nums[right]-nums[left];
            if(val==k){                                     // diff is equals to target then count++ and also left++
                count++;
                left++;
            } else if(val<k){                               // if target > val, then right++
                right++;
            } else{
                left++;
            }
        }
        return count;
    }
}
