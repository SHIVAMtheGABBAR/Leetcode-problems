Given an sorted array of integers, find two numbers that their difference equals to a target value.
Return a list with two number like [num1, num2] that the difference of num1 and num2 equals to target value, and num1 is less than num2.

It's guaranteed there is only one available solution.
Note: Requires O(1) space complexity to compile
----------------------------------------------------------------------------------------------------------------------------------------------------
Input: nums = [2, 7, 15, 24], target = 5 
Output: [2, 7] 
Explanation:
(7 - 2 = 5)

Input: nums = [1, 1], target = 0
Output: [1, 1] 
Explanation:
(1 - 1 = 0)
----------------------------------------------------------------------------------------------------------------------------------------------------
public class Solution {
    public int[] twoSum7(int[] nums, int target) {
           int ptr1 = 0, ptr2 = 1;                                        // ptr1 will point 1st element and ptr2 will point 2nd element
           int[] arr = new int[2];
           while(ptr1<nums.length && ptr2<nums.length){                   // we will traverse till anyone of them reaches end of array.
               if(nums[ptr2] - nums[ptr1] == target && ptr2!=ptr1){       // Index should be different when difference of pair is equal to target
                   arr[0] = Math.min(nums[ptr1], nums[ptr2]);
                   arr[1] = Math.max(nums[ptr1], nums[ptr2]);
                   return arr;
               } else if(nums[ptr2] - nums[ptr1] < target){
                   ptr2++;                                                // ptr2 will alo move in forward direction
               } else{
                   ptr1++;                                                // ptr1 will alo move in forward direction
               }
           }
           return arr;
    }
}
--------------------------------------------------------------------------------
Time complexity = O(N)
Space complexity = O(1)
