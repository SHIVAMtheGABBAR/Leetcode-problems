You are given an array of N integers, A1, A2 ,..., AN and an integer B. Return the of count of distinct numbers in all windows of size B.

Formally, return an array of size N-B+1 where i'th element in this array contains number of distinct elements in sequence Ai, Ai+1 ,..., Ai+B-1.

NOTE:  if B > N, return an empty array.
---------------------------------------------------------------------------------------
Input 1:

 A = [1, 2, 1, 3, 4, 3]
 B = 3
Input 2:

 A = [1, 1, 2, 2]
 B = 1


Example Output
Output 1:

 [2, 3, 3, 2]
Output 2:

 [1, 1, 1, 1]


Example Explanation
Explanation 1:

 A=[1, 2, 1, 3, 4, 3] and B = 3
 All windows of size B are
 [1, 2, 1]
 [2, 1, 3]
 [1, 3, 4]
 [3, 4, 3]
 So, we return an array [2, 3, 3, 2].
Explanation 2:

 Window size is 1, so the output array is [1, 1, 1, 1].
 ---------------------------------------------------------------------------------------------------------------------------------
 Approach: Push all elements of window in hashmap, and also add ans as sizeof current hashmap in Arraylist<Integer>.
           Now traverse from window position till last element and add element in hashmap and decremant elements value from hashmap, 
           while decrementing if value of removing key is 1 then remove that key from hashmap. And each time while traversing add hashMap size into Arraylist 
           
 Time complexity = O(N) while traversing array
 Space complexity = O(N) for Hashmap
 ---------------------------------------------------------------------------------------------------------------------------------
 public class Solution {
    public ArrayList<Integer> dNums(ArrayList<Integer> arr, int win) {
        HashMap<Integer, Integer> hmap = new HashMap<>();
        int n = arr.size();

        for(int i=0;i<win;i++){
            hmap.put(arr.get(i), hmap.getOrDefault(arr.get(i),0)+1);
        }
        ArrayList<Integer> ans = new ArrayList<>();
        ans.add(hmap.size());

        for(int i=win;i<n;i++){
            int inc = arr.get(i);
            int exc = arr.get(i-win);
            hmap.put(inc, hmap.getOrDefault(inc, 0)+1);
            int freqExc = hmap.getOrDefault(exc, 0);
            if(freqExc==1){
                hmap.remove(exc);
            } else{
                hmap.put(exc, hmap.get(exc)-1);
            }   
            ans.add(hmap.size());
        }
    return ans;
    }
}
