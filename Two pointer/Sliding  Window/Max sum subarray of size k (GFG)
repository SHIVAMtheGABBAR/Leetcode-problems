Given an array of integers Arr of size N and a number K. Return the maximum sum of a subarray of size K.

Input:
N = 4, K = 2
Arr = [100, 200, 300, 400]
Output:
700
Explanation:
Arr3  + Arr4 =700,
which is maximum.

Input:
N = 4, K = 4
Arr = [100, 200, 300, 400]
Output:
1000
Explanation:
Arr1 + Arr2 + Arr3  
+ Arr4 =1000,
which is maximum.
------------------------------------------------------------------------------------------------------------------------
Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)
---------------------------------------------------------
class Solution{
    static int maximumSumSubarray(int win, ArrayList<Integer> arr,int n){
        int currSum = 0;
        
        for(int i=0;i<win;i++){
            currSum += arr.get(i);      // get sum of all elements from window
        }
        
        int maxSum = currSum;
        for(int i=win;i<n;i++){                             // start from window to last element
            int inc = arr.get(i);                           // get element to be included in new sum
            int exc = arr.get(i-win);                       // get element to be excluded from new sum
            currSum = currSum +inc-exc;                     // get updated sum
            maxSum = Math.max(currSum, maxSum);             // check if maxSum can be updated
        }        
        return maxSum;
    }
}
