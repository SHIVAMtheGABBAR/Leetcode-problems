Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.
In other words, return true if one of s1's permutations is the substring of s2.

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
----------------------------------------------------
1 <= s1.length, s2.length <= 104
s1 and s2 consist of lowercase English letters.
--------------------------------------------------------

class Solution {
    
    public boolean checkIfFreqArraySame(int[] reqArr, int[] currArr){   // function to check freq of both required array and current array as same
        for(int i=0;i<26;i++){
            if(reqArr[i]!=currArr[i]){
                return false;
            }
        }
        return true;
    }
    
    public boolean checkInclusion(String s1, String s2) {
        int[] reqArr = new int[26];                               // by default stores 0
        int[] currArr = new int[26];                              // by default stores 0
        
        int s1Length = s1.length();
        int i=0;
        for(i=0;i<s1.length();i++){
          reqArr[s1.charAt(i)-'a']++;                             // store freq of string in required array
        }
        
        for(i=0;i<s1.length() && i<s2.length();i++){
          currArr[s2.charAt(i)-'a']++;                            // store freq of string2 of window of length of string1 
        }
        
        if(checkIfFreqArraySame(reqArr, currArr) == true){          // check if both araay has same freq
            return true;
        }
        
        for(int k=i;k<s2.length();k++){                             // traverse the string and check freq of curr and required array, if same then return true 
            if(currArr[s2.charAt(k-s1Length)-'a']>0){
                currArr[s2.charAt(k-s1Length)-'a']--;
            }
            currArr[s2.charAt(k)-'a']++;
            
            if(checkIfFreqArraySame(reqArr, currArr) == true){
                return true;
            }
        }
        return false;                                                 // if no anagram found then return false
    }
}
