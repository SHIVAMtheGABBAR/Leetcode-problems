Given an array A[] of size N and a positive integer K, find the first negative integer for each and every window(contiguous subarray) of size K.
-------------------------------------------------------------------------------------
Input : N = 5
A[] = {-8, 2, 3, -6, 10}
K = 2
Output : -8 0 -6 -6
Explanation :
First negative integer for each window of size k
{-8, 2} = -8
{2, 3} = 0 (does not contain a negative integer)
{3, -6} = -6
{-6, 10} = -6
 
Input : N = 8
A[] = {12, -1, -7, 8, -15, 30, 16, 28}
K = 3
Output : -1 -1 -7 -15 -15 0 
----------------------------------------------------------------------------------------
Expected Time Complexity: O(N)
Expected Auxiliary Space: O(K)
-----------------------------------------------------------------------------------------------------------------------------------------
Approach: Use Deque to store negative elemnts index, if index stored in deque is out of window then remove that index from deque. 
-----------------------------------------------------------------------------------------------------------------------------------------
public long[] printFirstNegativeInteger(long nums[], int n, int win)
    {
        Deque<Integer> dq = new ArrayDeque<>();     // To store index of negative elements
        
        for(int i=0;i<win;i++){
            if(nums[i]<0){
                dq.addLast(i);                      // Adding index of negative elements in deque for first k elements.        
            }            
        }
        long[] ans = new long[n-win+1];             // Answer list which needs to be return.
        int answerIdx = 0;                          // index of list where elements needs to be added in list. 
        
        ans[answerIdx++] = (dq.size()==0)? 0 : nums[dq.getFirst()];       // Add first answer in list, if deque is empty then add 0 else element of deque idx.
        
        for(int i=win;i<n;i++){
            if(!dq.isEmpty() && i-win==dq.getFirst()){        // if dq is non empty and idx in dq moves below from range of window, then remove that index.
                dq.removeFirst();
            }
            if(nums[i]<0){
                dq.addLast(i);                                // If element is negative then add it in deque.
            }
            ans[answerIdx++] = (dq.size()==0)? 0 : nums[dq.getFirst()];      // add answer in deque
        }
        
        return ans;
    }
