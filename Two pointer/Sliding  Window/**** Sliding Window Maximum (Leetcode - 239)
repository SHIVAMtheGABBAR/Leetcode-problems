You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. 
You can only see the k numbers in the window. Each time the sliding window moves right by one position.
Return the max sliding window.
--------------------------------------------------------------------------------------
Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

Input: nums = [1], k = 1
Output: [1]
---------------------------------------------------------------------------------------
1 <= nums.length <= 105
-104 <= nums[i] <= 104
1 <= k <= nums.length
--------------------------------------------------------------------------------------------------------------------
Approach: Use deque to store index of element which can be maximum. And keep on updating elements index in deque. 
Time complexity = O(N)
Space complexity = O(N) for deque
--------------------------------------------------------------------------------------------------------------------
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n= nums.length;
        int[] ans = new int[n-k+1];                                      // it will store answer
        Deque<Integer> dq = new ArrayDeque<>();
        int window = 0;
        for(int i=0;i<n;i++){
            if(dq.size()>0 && dq.getFirst()<=i-k){                      // To check if element in dq at initial position is out of window, then remove it.
                dq.removeFirst();
            }
            
            while(dq.size()>0 && nums[dq.getLast()]<nums[i]){    //Check if last element in dq is lesser than current array element, then keep on removing from dq
                dq.removeLast();
            }
            dq.addLast(i);                                 // now add that current element in dq which may be maximum for other set of window
            
            if(i>=k-1){                                    // we need to store answer when i start from k-1th element to nth element.
                ans[window++] = nums[dq.getFirst()];
            }
            
        }
        return ans;                                         // return answer array.
    }
}
