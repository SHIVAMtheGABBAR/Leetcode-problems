Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.
------------------------------------------------------------
Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]
------------------------------------------------------------- 
Constraints:

1 <= nums.length <= 200
-109 <= nums[i] <= 109
-109 <= target <= 109
---------------------------------------------------------------
Approach: for ksum, use ksum if k>2 else use twosum approach
----------------------------------------------------------
class Solution {
    
    public List<List<Integer>> twoSum(int[] nums, int left, int target){
        List<List<Integer>> pairs = new ArrayList<>();
        int start = left;   
        int right = nums.length-1; 
                                                                   
        while(left<right){
            if(left>start && nums[left-1]==nums[left]){
                left++;                                             
                continue;
            }
            
            int sum = nums[left] + nums[right];
            if(sum==target){
                List<Integer> pair = new ArrayList<>();             
                pair.add(nums[left]);
                pair.add(nums[right]);
                pairs.add(pair);
                left++;
                right--;
            } else if(sum>target){
                right--;                                            
            } else{
                left++;
            }
        }
        
        return pairs;                                             
    }
    
    public List<List<Integer>> kSum(int[] nums, int start, int target, int k){
        if(k==2){
            return twoSum(nums, start, target);             // if k==2 , apply 2 sum else ksum with recursion
        }  
        
        List<List<Integer>> ans = new ArrayList<>();
        
        for(int i=start;i<=nums.length-k;i++){
            if(i>start && nums[i]==nums[i-1]){
                continue;
            }
            
            List<List<Integer>> res = kSum(nums, i+1, target-nums[i], k-1);
            for(List<Integer> sub: res){
                sub.add(0, nums[i]);
                ans.add(sub);
            }
        }
        return ans;
    }
    
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        return kSum(nums, 0, target, 4);                                  // pass kas value instead of 4 for ksum here.
    }
}
---------------------------------------------------------
Time complexity = for ksum = O(n^k-1)
Space complexity = O(N) for arraylist
