Given an integer array nums and an integer k, return the number of pairs (i, j) where i < j such that |nums[i] - nums[j]| == k.
-------------------------------------------------------------------------------------
Input: nums = [1,2,2,1], k = 1
Output: 4
Explanation: The pairs with an absolute difference of 1 are:
- [1,2,2,1]
- [1,2,2,1]
- [1,2,2,1]
- [1,2,2,1]
-------------------------------------------------------------------------------------
Input: nums = [1,3], k = 3
Output: 0
Explanation: There are no pairs with an absolute difference of 3.
---------------------------------------------------------------------------------------
Input: nums = [3,2,1,5,4], k = 2
Output: 3
Explanation: The pairs with an absolute difference of 2 are:
- [3,2,1,5,4]
- [3,2,1,5,4]
- [3,2,1,5,4]
---------------------------------------------------------------------------------------------------------------------
Approach: Create Hashmap of ley and its count as value.
          Then traverse the HashMap and if traget is 0 then use nc2 else get both freq of key and (k+key) and multiply them 
Time complexity = O(N)
Space complexity = O(N) for hashmap
-----------------------------------------------------------------------------------------------------------
class Solution {
    public int countKDifference(int[] nums, int k) {
        HashMap<Integer, Integer> hmap = new HashMap<>();
        int count = 0 ;
        for(int i=0;i<nums.length;i++){
            hmap.put(nums[i], hmap.getOrDefault(nums[i], 0)+1);
        }
        
        for(Integer key : hmap.keySet()){
            int freq1 = hmap.get(key);
            
            if(k==0){
                count += (freq1*(freq1-1))/2;   // if k==0, then it shoul be nc2
            } else{
                int freq2 = hmap.getOrDefault(k+key, 0); // Here (k+key) will be different key in hmap which will return its freq if present else it will return 0
                count += freq1*freq2;
            }
            
        }
        return count;
    }
}
