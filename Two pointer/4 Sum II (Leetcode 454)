Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that:

0 <= i, j, k, l < n
nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0
--------------------------------------------------------------------------------------------------------------------
Input: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]
Output: 2
Explanation:
The two tuples are:
1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0
------------------------------------------------------------------------------------------------------------------
Constraints:

n == nums1.length
n == nums2.length
n == nums3.length
n == nums4.length
1 <= n <= 200
-228 <= nums1[i], nums2[i], nums3[i], nums4[i] <= 228
======================================================================================================================
Approach: Find pairs from Array1 and Array2 and Store their sum(val1 + val2) as key and update value in Hashmap when sum equals (val1+val2)
        : Now find values from Array3 and Array4, and search(-val3-val4) in hashMap and increment our count variable and return the count at the end.
-----------------------------------------------------------------------------------        
Time complexity = O(N^2)
Space complexity = O(N^2)  
-----------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) {
     
        HashMap<Integer, Integer> hmap = new HashMap<>();
        
        for(int val1 : nums1){
            for(int val2 : nums2){
                hmap.put(val1+val2, hmap.getOrDefault(val1+val2,0)+1);
            }
        }
        
        int count=0;
        for(int val3 : nums3){
            for(int val4:nums4){
                count += hmap.getOrDefault(-val3-val4,0);
            }
        }
        return count;
    }
}
